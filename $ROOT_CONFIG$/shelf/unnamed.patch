Index: src/test/java/au/com/finsyn/i18n/I18NTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/test/java/au/com/finsyn/i18n/I18NTest.java	(revision 30357+:74eeb64d8cfc+)
+++ src/test/java/au/com/finsyn/i18n/I18NTest.java	(revision 30357+:74eeb64d8cfc+)
@@ -0,0 +1,80 @@
+package au.com.finsyn.i18n;
+
+import com.github.rodionmoiseev.c10n.C10N;
+import com.github.rodionmoiseev.c10n.C10NConfigBase;
+import com.github.rodionmoiseev.c10n.C10NMessages;
+import com.github.rodionmoiseev.c10n.C10NMsgFactory;
+import com.github.rodionmoiseev.c10n.annotations.En;
+import com.github.rodionmoiseev.c10n.annotations.Fr;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Locale;
+
+import static org.junit.Assert.*;
+
+public class I18NTest {
+
+    @Before
+    public void setUp() throws Exception {
+        I18N.HELPER.clearFactory();
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        I18N.HELPER.clearFactory();
+    }
+
+    @Test
+    public void testGetBundleWithoutConfiguration() throws Exception {
+        TestBundle testBundle = I18N.HELPER.get(TestBundle.class);
+
+        assertEquals("Test String", testBundle.testString());
+    }
+
+    @Test
+    public void testGetBundleWithoutConfigurationFrench() throws Exception {
+        TestBundle testBundle = I18N.HELPER.get(TestBundle.class, Locale.FRENCH);
+
+        assertEquals("test de cordes", testBundle.testString());
+    }
+
+    @Test
+    public void testGetBundleUsingPropertiesSpanish() throws Exception {
+        C10NMsgFactory factory = C10N.createMsgFactory(new C10NConfigBase() {
+            @Override
+            protected void configure() {
+                bindBundle("au.com.finsyn.i18n.TestBundle");
+            }
+        });
+
+        I18N.HELPER.useFactory(factory);
+
+        TestBundle testBundle = I18N.HELPER.get(TestBundle.class, new Locale("ES"));
+
+        assertEquals("Prueba de cuerda", testBundle.testString());
+    }
+
+    @Test
+    public void testGetBundleWithEmptyConfiguration() throws Exception {
+        C10NMsgFactory factory = C10N.createMsgFactory(new C10NConfigBase() {
+            @Override
+            protected void configure() {
+            }
+        });
+
+        I18N.HELPER.useFactory(factory);
+
+        TestBundle testBundle = I18N.HELPER.get(TestBundle.class);
+
+        assertEquals("TestBundle.testString", testBundle.testString());
+    }
+
+    @C10NMessages
+    public interface TestBundle {
+        @En("test string")
+        @Fr("test de cordes")
+        String testString();
+    }
+}
\ No newline at end of file
Index: src/test/resources/au/com/finsyn/i18n/TestBundle_de.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/test/resources/au/com/finsyn/i18n/TestBundle_de.properties	(revision 30357+:74eeb64d8cfc+)
+++ src/test/resources/au/com/finsyn/i18n/TestBundle_de.properties	(revision 30357+:74eeb64d8cfc+)
@@ -0,0 +1,1 @@
+au.com.finsyn.i18n.I18NTest.TestBundle.testString = Prueba de cuerda
\ No newline at end of file
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- build.gradle	(revision 30357:74eeb64d8cfc782747a56bda35755db2f89483cc)
+++ build.gradle	(revision 30357+:74eeb64d8cfc+)
@@ -37,6 +37,8 @@
 
     compile 'org.slf4j:slf4j-api:1.7.12'
 
+    compile 'com.github.rodionmoiseev.c10n:c10n-core:1.2'
+
     compile group: 'junit', name: 'junit', version: '4.11'
 }
 
\ No newline at end of file
Index: src/main/java/au/com/finsyn/hibernate/tools/SortOrder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/main/java/au/com/finsyn/hibernate/tools/SortOrder.java	(revision 30357:74eeb64d8cfc782747a56bda35755db2f89483cc)
+++ src/main/java/au/com/finsyn/hibernate/tools/SortOrder.java	(revision 30357+:74eeb64d8cfc+)
@@ -1,20 +1,23 @@
 package au.com.finsyn.hibernate.tools;
 
-import javax.annotation.ParametersAreNonnullByDefault;
+import au.com.finsyn.i18n.FinsynCommonsBundle;
+import au.com.finsyn.i18n.I18N;
+import com.github.rodionmoiseev.c10n.C10N;
+
+import java.util.Locale;
 import java.util.Objects;
 
 public enum SortOrder {
     ASCENDING("ASC"), DESCENDING("DESC");
 
+    private static final FinsynCommonsBundle BUNDLE = I18N.HELPER.get(FinsynCommonsBundle.class);
+
     private String sqlCode;
 
     private SortOrder(String sqlCode) {
         this.sqlCode = Objects.requireNonNull(sqlCode);
     }
 
-    /**
-     * Returns "{@code ASC}" for {@link #ASCENDING} and "{@code DESC}" for {@link #DESCENDING}.
-     */
     public String getSqlCode() {
         return sqlCode;
     }
@@ -22,11 +25,11 @@
     public String render() {
         switch (this) {
             case ASCENDING:
-                return "Ascending";
+                return BUNDLE.sortOrder().ascending();
             case DESCENDING:
-                return "Descending";
+                return BUNDLE.sortOrder().descending();
             default:
-                return this.toString();
+                throw new UnexpectedSortOrderException(this);
         }
     }
 
@@ -36,9 +39,9 @@
                 return DESCENDING;
             case DESCENDING:
                 return ASCENDING;
+            default:
+                throw new UnexpectedSortOrderException(this);
         }
-        throw new AssertionError("Encountered " + SortOrder.class.getName() + " that was neither " + ASCENDING
-                + " nor " + DESCENDING);
     }
 
     public static SortOrder fromAscending(boolean isAscending) {
@@ -54,5 +57,12 @@
      */
     public static SortOrder theDefault() {
         return ASCENDING;
+    }
+
+    public class UnexpectedSortOrderException extends RuntimeException {
+        protected UnexpectedSortOrderException(SortOrder unexpected) {
+            super("Encountered " + SortOrder.class.getName() + " instance of type " + unexpected + " that was neither "
+                    + ASCENDING + " nor " + DESCENDING);
+        }
     }
 }
Index: src/test/java/au/com/finsyn/hibernate/tools/SortOrderTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/test/java/au/com/finsyn/hibernate/tools/SortOrderTest.java	(revision 30357+:74eeb64d8cfc+)
+++ src/test/java/au/com/finsyn/hibernate/tools/SortOrderTest.java	(revision 30357+:74eeb64d8cfc+)
@@ -0,0 +1,48 @@
+package au.com.finsyn.hibernate.tools;
+
+import org.junit.Test;
+
+import static au.com.finsyn.hibernate.tools.SortOrder.ASCENDING;
+import static au.com.finsyn.hibernate.tools.SortOrder.DESCENDING;
+import static au.com.finsyn.hibernate.tools.SortOrder.fromAscending;
+import static au.com.finsyn.hibernate.tools.SortOrder.fromDescending;
+import static au.com.finsyn.hibernate.tools.SortOrder.theDefault;
+import static org.junit.Assert.assertEquals;
+
+public class SortOrderTest {
+
+    @Test
+    public void testGetSqlCode() throws Exception {
+        assertEquals("ASC", ASCENDING.getSqlCode());
+        assertEquals("DESC", DESCENDING.getSqlCode());
+    }
+
+    @Test
+    public void testRender() throws Exception {
+        assertEquals("Ascending", ASCENDING.render());
+        assertEquals("Descending", DESCENDING.render());
+    }
+
+    @Test
+    public void testInvert() throws Exception {
+        assertEquals(DESCENDING, ASCENDING.invert());
+        assertEquals(ASCENDING, DESCENDING.invert());
+    }
+
+    @Test
+    public void testFromAscending() throws Exception {
+        assertEquals(ASCENDING, fromAscending(true));
+        assertEquals(DESCENDING, fromAscending(false));
+    }
+
+    @Test
+    public void testFromDescending() throws Exception {
+        assertEquals(ASCENDING, fromDescending(false));
+        assertEquals(DESCENDING, fromDescending(true));
+    }
+
+    @Test
+    public void testTheDefault() throws Exception {
+        assertEquals(ASCENDING, theDefault());
+    }
+}
\ No newline at end of file
Index: src/test/java/au/com/finsyn/i18n/C10NTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/test/java/au/com/finsyn/i18n/C10NTest.java	(revision 30357+:74eeb64d8cfc+)
+++ src/test/java/au/com/finsyn/i18n/C10NTest.java	(revision 30357+:74eeb64d8cfc+)
@@ -0,0 +1,21 @@
+package au.com.finsyn.i18n;
+
+import com.github.rodionmoiseev.c10n.C10N;
+import com.github.rodionmoiseev.c10n.C10NConfigBase;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotSame;
+
+// TODO fix up this test
+public class C10NTest {
+
+    @Test
+    public void testC10NNoCache() throws Exception {
+        FinsynCommonsBundle firstMessagesInstance = C10N.get(FinsynCommonsBundle.class);
+        FinsynCommonsBundle secondMessagesInstance = C10N.get(FinsynCommonsBundle.class);
+
+        assertNotSame(firstMessagesInstance, secondMessagesInstance);
+    }
+}
\ No newline at end of file
Index: src/main/java/au/com/finsyn/i18n/FinsynCommonsBundle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/main/java/au/com/finsyn/i18n/FinsynCommonsBundle.java	(revision 30357+:74eeb64d8cfc+)
+++ src/main/java/au/com/finsyn/i18n/FinsynCommonsBundle.java	(revision 30357+:74eeb64d8cfc+)
@@ -0,0 +1,25 @@
+package au.com.finsyn.i18n;
+
+import com.github.rodionmoiseev.c10n.C10N;
+import com.github.rodionmoiseev.c10n.C10NConfigBase;
+import com.github.rodionmoiseev.c10n.C10NMessages;
+import com.github.rodionmoiseev.c10n.annotations.En;
+import com.github.rodionmoiseev.c10n.annotations.Ru;
+
+import java.util.Locale;
+
+@C10NMessages
+public interface FinsynCommonsBundle {
+
+    SortOrder sortOrder();
+
+    @C10NMessages
+    public interface SortOrder {
+        @En("Ascending")
+        @Ru("BLAH")
+        String ascending();
+
+        @En("Descending")
+        String descending();
+    }
+}
Index: src/main/java/au/com/finsyn/i18n/I18N.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/main/java/au/com/finsyn/i18n/I18N.java	(revision 30357+:74eeb64d8cfc+)
+++ src/main/java/au/com/finsyn/i18n/I18N.java	(revision 30357+:74eeb64d8cfc+)
@@ -0,0 +1,34 @@
+package au.com.finsyn.i18n;
+
+import com.github.rodionmoiseev.c10n.C10NMsgFactory;
+
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.Locale;
+
+@ParametersAreNonnullByDefault
+public enum I18N implements C10NMsgFactory {
+
+    HELPER;
+
+    public void clearFactory() {
+        // TODO unimplemented
+        throw new UnsupportedOperationException("Unimplemented");
+    }
+
+    public void useFactory(C10NMsgFactory factory) {
+        // TODO unimplemented
+        throw new UnsupportedOperationException("Unimplemented");
+    }
+
+    @Override
+    public <T> T get(Class<T> c10nInterface) {
+        // TODO automatically generated method stub
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public <T> T get(Class<T> c10nInterface, Locale locale) {
+        // TODO automatically generated method stub
+        throw new UnsupportedOperationException();
+    }
+}
