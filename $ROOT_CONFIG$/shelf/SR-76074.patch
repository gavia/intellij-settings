Index: src/main/java/au/com/finsyn/workbench/manage/model/ManageWorkbenchLinesModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/main/java/au/com/finsyn/workbench/manage/model/ManageWorkbenchLinesModel.java	(revision 27642:125afeb935ba373c2dad1f1a597b713964bc01b4)
+++ src/main/java/au/com/finsyn/workbench/manage/model/ManageWorkbenchLinesModel.java	(revision 27642+:125afeb935ba+)
@@ -17,6 +17,9 @@
 
 import javax.swing.SwingUtilities;
 
+import javafx.beans.property.adapter.JavaBeanObjectPropertyBuilder;
+import javafx.beans.property.adapter.ReadOnlyJavaBeanObjectPropertyBuilder;
+import javafx.beans.value.ObservableValue;
 import org.apache.commons.lang3.StringUtils;
 import org.hibernate.criterion.Restrictions;
 
@@ -301,6 +304,18 @@
 		Object oldValue = this.selectedWorkbenchLine;
 		this.selectedWorkbenchLine = selectedWorkbenchLine;
 		firePropertyChange(SELECTED_WORKBENCH_LINE, oldValue, selectedWorkbenchLine);
+	}
+
+	public ObservableValue<WorkbenchLines> selectedWorkbenchLinesObservable() {
+		try {
+			return ReadOnlyJavaBeanObjectPropertyBuilder.<WorkbenchLines>create()
+                    .bean(this)
+                    .name(SELECTED_WORKBENCH_LINE)
+                    .build();
+		} catch (NoSuchMethodException e) {
+			throw new RuntimeException("Unable to find getter for bound property \"" + SELECTED_WORKBENCH_LINE + "\".",
+					e);
+		}
 	}
 
 	public void setSelectedContributionLine(ContributionLines selectedContributionLine) {
Index: src/test/java/au/com/finsyn/hibernate/AcurityEntityUtilsTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/test/java/au/com/finsyn/hibernate/AcurityEntityUtilsTest.java	(revision 27642+:125afeb935ba+)
+++ src/test/java/au/com/finsyn/hibernate/AcurityEntityUtilsTest.java	(revision 27642+:125afeb935ba+)
@@ -0,0 +1,55 @@
+package au.com.finsyn.hibernate;
+
+import au.com.finsyn.hibernate.generated.entities.MemberDetails;
+import au.com.finsyn.hibernate.generated.entities.PersonalDetails;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class AcurityEntityUtilsTest {
+
+    @Test
+    public void testClone() throws Exception {
+        String givenName = "Jane";
+        String surname = "Doe";
+        String clientNumber = "00000001";
+        String fund = "FUND";
+        String memberNumber = "000001";
+
+        PersonalDetails clientRecord = new PersonalDetails();
+
+        clientRecord.setD2i_Identity(1);
+        clientRecord.setD2z_Given_Names(givenName);
+        clientRecord.setD2z_Surname(surname);
+        clientRecord.setD2z_Client(clientNumber);
+
+        MemberDetails memberDetails = new MemberDetails();
+
+        memberDetails.setMDi_Identity(1);
+        memberDetails.setMDz_Fund(fund);
+        memberDetails.setMDz_Member(memberNumber);
+        memberDetails.setMDz_Acct_No(clientNumber);
+        memberDetails.setMDz_Given_Names(givenName);
+        memberDetails.setMDz_Surname(surname);
+
+        memberDetails.setClient(clientRecord);
+
+        MemberDetails clonedMemberDetails = AcurityEntityUtils.clone(memberDetails);
+
+        assertFalse(memberDetails == clonedMemberDetails);
+        assertTrue(memberDetails.equals(clonedMemberDetails));
+
+        assertEquals(givenName, clonedMemberDetails.getMDz_Given_Names());
+        assertEquals(surname, clonedMemberDetails.getMDz_Surname());
+        assertEquals(clientNumber, clonedMemberDetails.getMDz_Acct_No());
+        assertEquals(fund, clonedMemberDetails.getMDz_Fund());
+        assertEquals(memberNumber, clonedMemberDetails.getMDz_Member());
+
+        assertFalse(clonedMemberDetails.getClient() == clientRecord);
+        assertTrue(clonedMemberDetails.getClient().equals(clientRecord));
+
+        assertEquals(givenName, clonedMemberDetails.getClient().getD2z_Given_Names());
+        assertEquals(surname, clonedMemberDetails.getClient().getD2z_Surname());
+        assertEquals(clientNumber, clonedMemberDetails.getClient().getD2z_Client());
+    }
+}
\ No newline at end of file
Index: src/main/java/jSSS/cdelegation/AcurityCommandGeneric.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/main/java/jSSS/cdelegation/AcurityCommandGeneric.java	(revision 27642:125afeb935ba373c2dad1f1a597b713964bc01b4)
+++ src/main/java/jSSS/cdelegation/AcurityCommandGeneric.java	(revision 27642+:125afeb935ba+)
@@ -1,5 +1,9 @@
 package jSSS.cdelegation;
 
+import au.com.finsyn.swing.dialogs.Dialogs;
+import au.com.finsyn.swing.dialogs.MessageDialog.MessageType;
+import au.com.finsyn.util.AcurityLogging;
+import au.com.finsyn.util.exceptions.ExceptionHandler;
 import jSSS.jcore.jSSSApplication;
 import jSSS.jcore.functions.IjSSSFunction;
 import jSSS.jcore.functions.jSSSMultiFunctionTask;
@@ -17,11 +21,13 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.regex.Pattern;
 
 import javax.swing.JOptionPane;
 
 import au.com.finsyn.util.ParamChecker;
+import org.apache.commons.logging.Log;
 
 /**
  * Class representing an Acurity "Electronic Processing Data File". When querying Acurity for data a Data File consists at the
@@ -38,8 +44,10 @@
  * For a detailed description of Control lines and Header lines and Data lines, see the Acurity help file (search for
  * "Electronic Processing").
  */
-public class AcurityCommandGeneric implements Task, IjSSSFunction
-{
+public class AcurityCommandGeneric implements Task, IjSSSFunction {
+
+	private static final Log LOG = AcurityLogging.getInstance().getLogger(AcurityCommandGeneric.class);
+
 	/**
 	 * Use the Division from the Fund Record if {@link AcurityJob#FND} is specified. Otherwise use division 0 (zero)
 	 */
@@ -132,6 +140,7 @@
 	public static final String CONTROL_LINE_TST = "TST";
 	
 	public static final String _newline = System.getProperty("line.separator");
+	private static String message;
 
 	private final Map<String, String> _controlLineParameters = new LinkedHashMap<String, String>();
 	private final Map<String, String> _userDefinedControlLineParameters = new LinkedHashMap<String, String>();
@@ -870,28 +879,37 @@
 	 * @param result
 	 * @return true if no errors, false if errors.
 	 */
-	public static boolean checkForErrorsAndShowDialog(Object result)
-	{
-		if (!hasErrors(result))
-		{
-			return true; //no errors
-		}
-		else if (result instanceof AcurityCommandException)
-		{
-			jSSSApp.displayJOptionPaneMessage(((AcurityCommandException) result).getFormattedMessage(), "Running API process failed.", JOptionPane.ERROR_MESSAGE);
-		}
-		else if (result instanceof Throwable)
-		{
+	public static boolean checkForErrorsAndShowDialog(Object result) {
+		if (!hasErrors(result)) {
+			return true;
+		} else {
+			Optional<Exception> resultException = extractExceptionFromResult(result);
+
+			if (resultException.isPresent()) {
+				if (resultException.get() instanceof AcurityCommandException) {
+					Dialogs.show(null, MessageType.ERROR, ((AcurityCommandException) resultException.get()).getFormattedMessage(), "Running API process failed.");
+				} else {
+					message = "Running API process failed. " + ((Throwable) result).getMessage();
+					LOG.error(message, resultException.get());
-			jSSSLogger.severe(result);
+					jSSSLogger.severe(result);
-			jSSSApp.displayJOptionPaneMessage("Running API process failed. " + ((Throwable) result).getMessage(), "Failed", JOptionPane.ERROR_MESSAGE);
+					jSSSApp.displayJOptionPaneMessage(message, "Failed", JOptionPane.ERROR_MESSAGE);
-		}
+				}
-		else
-		{
+			} else {
-			jSSSLogger.severe(result);
-			jSSSApp.displayJOptionPaneMessage("Running API process failed. Unexpected Response ["
-					+ result.getClass().toString() + "]", "Failed", JOptionPane.ERROR_MESSAGE);
-		}
+				jSSSLogger.severe(result);
+				jSSSApp.displayJOptionPaneMessage("Running API process failed. Unexpected Response ["
+						+ result.getClass().toString() + "]", "Failed", JOptionPane.ERROR_MESSAGE);
+			}
+
-		return false;
+			return false;
+		}
+	}
+
+	public static Optional<Exception> extractExceptionFromResult(Object result) {
+		if (result instanceof Throwable) {
+			ExceptionHandler.handleError((Throwable) result);
+		}
+
+		return result instanceof Exception ? Optional.of((Exception) result) : Optional.empty();
 	}
 	
 	/**
\ No newline at end of file
Index: src/main/java/au/com/finsyn/workbench/manage/view/setperiod/RetrieveLinesToUpdateTask.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/main/java/au/com/finsyn/workbench/manage/view/setperiod/RetrieveLinesToUpdateTask.java	(revision 27642+:125afeb935ba+)
+++ src/main/java/au/com/finsyn/workbench/manage/view/setperiod/RetrieveLinesToUpdateTask.java	(revision 27642+:125afeb935ba+)
@@ -0,0 +1,114 @@
+package au.com.finsyn.workbench.manage.view.setperiod;
+
+import au.com.finsyn.hibernate.generated.entities.ContributionLines;
+import au.com.finsyn.hibernate.generated.entities.WorkbenchLines;
+import au.com.finsyn.hibernate.tools.FundAndMember;
+import au.com.finsyn.hibernate.tools.JoinSpec;
+import au.com.finsyn.hibernate.tools.querybuilder.ParameterisedSQLFragment;
+import au.com.finsyn.hibernate.tools.querybuilder.SQLQueryBuilder;
+import au.com.finsyn.swing.util.workers.CancellableDatabaseTask;
+import au.com.finsyn.util.annotations.ReturnTypesAreNonnullByDefault;
+import au.com.finsyn.util.datastructures.GuavaCollectors;
+import au.com.finsyn.util.function.Predicates;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
+import org.hibernate.Session;
+
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.Collection;
+import java.util.List;
+import java.util.Optional;
+
+/**
+ * TODO add documentation
+ *
+ * @author timothym
+ */
+@ParametersAreNonnullByDefault
+@ReturnTypesAreNonnullByDefault
+class RetrieveLinesToUpdateTask extends CancellableDatabaseTask<ImmutableSet<WorkbenchLines>, Void> {
+
+    private static final JoinSpec fcToFWJoin = JoinSpec.fromAnnotation(ContributionLines.class, WorkbenchLines.class).get();
+    private static final JoinSpec fwToFCJoin = JoinSpec.fromAnnotation(WorkbenchLines.class, ContributionLines.class).get();
+
+    private final WorkbenchLines selectedFWLine;
+
+    public RetrieveLinesToUpdateTask(WorkbenchLines selectedFWLine) {
+        this.selectedFWLine = selectedFWLine;
+    }
+
+    @Override
+    protected ImmutableSet<WorkbenchLines> performTask(Session session) throws Exception {
+        FundAndMember fundAndMember = FundAndMember.fromWorkbenchLine(selectedFWLine);
+
+        Optional<ParameterisedSQLFragment> matchesDivsAndTransRefsFragment =
+                constructMatchesDivsAndTransRefsFilter(selectedFWLine);
+
+        if (!matchesDivsAndTransRefsFragment.isPresent()) {
+            // There are no divs or trans refs, so we'll only ever get an empty list.
+            return ImmutableSet.of();
+        }
+
+        ParameterisedSQLFragment matchingFCLinesSubSelect =
+                constructFCLinesSubSelect(fundAndMember, matchesDivsAndTransRefsFragment.get());
+
+        SQLQueryBuilder query = constructFWLinesQuery(matchingFCLinesSubSelect);
+
+        List<WorkbenchLines> results = query.constructAcurityEntitySqlExecutor(WorkbenchLines.class)
+                .setSession(session)
+                .execute()
+                .getResults();
+
+        return ImmutableSet.copyOf(results);
+    }
+
+    private static Optional<ParameterisedSQLFragment> constructMatchesDivsAndTransRefsFilter(
+            WorkbenchLines selectedFWLine) {
+        ImmutableSet<DivisionAndTransactionRef> divisionsAndTransRefs =
+                extractDivisionsAndTransRefs(selectedFWLine.getContributionLines());
+
+        ImmutableList<ParameterisedSQLFragment> fcMatchesDivsAndTransRefsFragments = divisionsAndTransRefs
+                .stream()
+                .map(DivisionAndTransactionRef::renderFilterForMatchingFCLine)
+                .collect(GuavaCollectors.<ParameterisedSQLFragment>toList());
+
+        return ParameterisedSQLFragment.bracketedJoin(fcMatchesDivsAndTransRefsFragments, "OR");
+    }
+
+    private static ParameterisedSQLFragment constructFCLinesSubSelect(
+            FundAndMember fundAndMember,
+            ParameterisedSQLFragment matchesDivsAndTransRefsFragment) {
+        return new ParameterisedSQLFragment()
+                .append("SELECT DISTINCT FWi_Identity")
+                .append("FROM").append(JoinSpec.constructFromClause(ContributionLines.class, fcToFWJoin))
+                .append("WHERE")
+                .append("FCz_Fund =").appendParameter(fundAndMember.getFund()).append("AND")
+                .append("FCz_Member =").appendParameter(fundAndMember.getMember()).append("AND")
+                .append(matchesDivsAndTransRefsFragment);
+    }
+
+    private static SQLQueryBuilder constructFWLinesQuery(ParameterisedSQLFragment selectFCLines) {
+        return new SQLQueryBuilder()
+                .append("SELECT *")
+                .append("FROM").append(JoinSpec.constructFromClause(WorkbenchLines.class, fwToFCJoin))
+                .append("WHERE")
+                .append("FWi_Identity IN (").append(selectFCLines).append(")")
+                .setMaxResults(null);
+    }
+
+    private static ImmutableSet<DivisionAndTransactionRef> extractDivisionsAndTransRefs(
+            Collection<ContributionLines> fcLines) {
+        return fcLines
+                .stream()
+                .filter(Predicates.isNotNull())
+                .filter(RetrieveLinesToUpdateTask::isPostedFCLineWithTransRef)
+                .map(fcLine -> new DivisionAndTransactionRef(fcLine.getFCz_Division(), fcLine.getFCl_Trans_Ref()))
+                .collect(GuavaCollectors.<DivisionAndTransactionRef>toSet());
+    }
+
+    private static boolean isPostedFCLineWithTransRef(ContributionLines fcLine) {
+        return fcLine.getFCz_Status() != null
+                && fcLine.getFCz_Status().trim().equalsIgnoreCase("Y")
+                && fcLine.getFCl_Trans_Ref() != 0;
+    }
+}
Index: src/main/java/jSSS/util/DateUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/main/java/jSSS/util/DateUtil.java	(revision 27642:125afeb935ba373c2dad1f1a597b713964bc01b4)
+++ src/main/java/jSSS/util/DateUtil.java	(revision 27642+:125afeb935ba+)
@@ -1,9 +1,12 @@
 package jSSS.util;
 
+import au.com.finsyn.util.annotations.ReturnTypesAreNonnullByDefault;
 import jSSS.jcore.jSSSApplication;
 import javafx.util.StringConverter;
+import org.hibernate.annotations.Immutable;
 import org.joda.time.Interval;
 
+import javax.annotation.ParametersAreNonnullByDefault;
 import java.text.DateFormat;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
@@ -278,4 +281,5 @@
             }
         }
     }
+
 }
Index: src/main/java/au/com/finsyn/workbench/manage/view/ManageWorkbenchLinesPopupMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/main/java/au/com/finsyn/workbench/manage/view/ManageWorkbenchLinesPopupMenu.java	(revision 27642:125afeb935ba373c2dad1f1a597b713964bc01b4)
+++ src/main/java/au/com/finsyn/workbench/manage/view/ManageWorkbenchLinesPopupMenu.java	(revision 27642+:125afeb935ba+)
@@ -1,5 +1,6 @@
 package au.com.finsyn.workbench.manage.view;
 
+import au.com.finsyn.workbench.manage.view.setperiod.SetPeriodDatesAction;
 import jSSS.jcore.swing.table.export.CopyAction;
 import au.com.finsyn.workbench.manage.model.ManageWorkbenchLinesModel;
 import au.com.finsyn.xmlcustomisation.customisablecomponents.XmlCustomisablePopupMenu;
@@ -21,6 +22,7 @@
 		add(new RejectWorkbenchLineAction(table, model));
 		add(new PeriodEndDateModifyAction(table, model));
 		add(new CreateSuperStreamErrorAction(table, model));
+		add(new SetPeriodDatesAction(table, model));
 		add(new Separator());
 		add(new WorkbenchLineViewDetailsAction(table, model));
 		add(new Separator());
Index: src/main/java/au/com/finsyn/workbench/manage/view/setperiod/SetPeriodsDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/main/java/au/com/finsyn/workbench/manage/view/setperiod/SetPeriodsDialog.java	(revision 27642+:125afeb935ba+)
+++ src/main/java/au/com/finsyn/workbench/manage/view/setperiod/SetPeriodsDialog.java	(revision 27642+:125afeb935ba+)
@@ -0,0 +1,75 @@
+package au.com.finsyn.workbench.manage.view.setperiod;
+
+import au.com.finsyn.hibernate.generated.entities.WorkbenchLines;
+import au.com.finsyn.swing.components.DialogJPanel;
+import au.com.finsyn.swing.components.JideDatePicker;
+import au.com.finsyn.swing.components.LabelLikeJTextArea;
+import au.com.finsyn.util.annotations.ReturnTypesAreNonnullByDefault;
+import au.com.finsyn.util.time.DateRange;
+import au.com.finsyn.util.time.DateRange.DateRangeException;
+import com.google.common.collect.ImmutableSet;
+import javafx.beans.property.Property;
+import javafx.beans.value.ObservableValue;
+import net.miginfocom.swing.MigLayout;
+
+import javax.annotation.Nullable;
+import javax.annotation.ParametersAreNonnullByDefault;
+import javax.swing.JComponent;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import java.util.Date;
+
+/**
+ * TODO add documentation
+ *
+ * @author timothym
+ */
+@ParametersAreNonnullByDefault
+@ReturnTypesAreNonnullByDefault
+public class SetPeriodsDialog extends DialogJPanel {
+
+    private final int numFWLinesChanged;
+    private final int numFCLinesChanged;
+
+    private final ObservableValue<Date> startDate;
+    private final ObservableValue<Date> endDate;
+
+    private final JideDatePicker startDatePicker;
+    private final JideDatePicker endDatePicker;
+
+    public SetPeriodsDialog(int numFWLinesChanged, int numFCLinesChanged) {
+        super("Set Period");
+
+        this.numFWLinesChanged = numFWLinesChanged;
+        this.numFCLinesChanged = numFCLinesChanged;
+
+        startDatePicker = new JideDatePicker();
+        endDatePicker = new JideDatePicker();
+
+        this.startDate = startDatePicker.selectedOldDateProperty();
+        this.endDate = endDatePicker.selectedOldDateProperty();
+    }
+
+    @Override
+    public JComponent createContentPanel() {
+        JPanel returnedPanel = new JPanel(new MigLayout("", "[][]", "[][][]"));
+
+        returnedPanel.add(new JLabel("Start Date:"), "cell 0 0");
+        returnedPanel.add(startDatePicker, "cell 1 0");
+        startDatePicker.setToolTipText(WorkbenchLines.FWD_PERIOD_START.getName());
+
+        returnedPanel.add(new JLabel("End Date:"), "cell 0 1");
+        returnedPanel.add(endDatePicker, "cell 1 1");
+        startDatePicker.setToolTipText(WorkbenchLines.FWD_PERIOD_END.getName());
+
+        // TODO sort out the nomenclature for this message
+        returnedPanel.add(new LabelLikeJTextArea("This will update " + numFWLinesChanged + " workbench lines and "
+                + numFCLinesChanged + " contribution lines."), "cell 0 2, spanx");
+
+        return returnedPanel;
+    }
+
+    public DateRange getDateRange() throws DateRangeException {
+        return DateRange.fromOldDates(this.startDate.getValue(), this.endDate.getValue());
+    }
+}
Index: src/main/java/au/com/finsyn/workbench/manage/view/setperiod/DivisionAndTransactionRef.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/main/java/au/com/finsyn/workbench/manage/view/setperiod/DivisionAndTransactionRef.java	(revision 27642+:125afeb935ba+)
+++ src/main/java/au/com/finsyn/workbench/manage/view/setperiod/DivisionAndTransactionRef.java	(revision 27642+:125afeb935ba+)
@@ -0,0 +1,34 @@
+package au.com.finsyn.workbench.manage.view.setperiod;
+
+import au.com.finsyn.hibernate.tools.querybuilder.ParameterisedSQLFragment;
+import au.com.finsyn.util.Pair;
+import au.com.finsyn.util.annotations.ReturnTypesAreNonnullByDefault;
+
+import javax.annotation.ParametersAreNonnullByDefault;
+
+/**
+ * TODO add documentation
+ *
+ * @author timothym
+ */
+@ParametersAreNonnullByDefault
+@ReturnTypesAreNonnullByDefault
+class DivisionAndTransactionRef extends Pair<String, Long> {
+    public DivisionAndTransactionRef(String division, Long transaction) {
+        super(division, transaction);
+    }
+
+    public String getDivision() {
+        return this.getFirst();
+    }
+
+    public Long getTransaction() {
+        return this.getSecond();
+    }
+
+    public ParameterisedSQLFragment renderFilterForMatchingFCLine() {
+        return new ParameterisedSQLFragment()
+                .append("FCz_Division =").appendParameter(this.getDivision()).append("AND")
+                .append("FCl_Trans_Ref =").appendParameter(this.getTransaction());
+    }
+}
Index: src/main/java/au/com/finsyn/workbench/manage/view/setperiod/SetPeriodDatesAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/main/java/au/com/finsyn/workbench/manage/view/setperiod/SetPeriodDatesAction.java	(revision 27642+:125afeb935ba+)
+++ src/main/java/au/com/finsyn/workbench/manage/view/setperiod/SetPeriodDatesAction.java	(revision 27642+:125afeb935ba+)
@@ -0,0 +1,147 @@
+package au.com.finsyn.workbench.manage.view.setperiod;
+
+import au.com.finsyn.hibernate.AcurityEntityUtils;
+import au.com.finsyn.hibernate.generated.entities.WorkbenchLines;
+import au.com.finsyn.swing.dialogs.Dialogs;
+import au.com.finsyn.swing.dialogs.MessageDialog.MessageType;
+import au.com.finsyn.swing.ui.ProgressDialog;
+import au.com.finsyn.util.AcurityLogging;
+import au.com.finsyn.util.annotations.ReturnTypesAreNonnullByDefault;
+import au.com.finsyn.util.exceptions.ExceptionHandler;
+import au.com.finsyn.util.time.DateRange;
+import au.com.finsyn.util.time.DateRange.DateRangeException;
+import au.com.finsyn.workbench.manage.model.ManageWorkbenchLinesModel;
+import au.com.finsyn.workbench.manage.model.ManageWorkbenchLinesTableModel;
+import au.com.finsyn.workbench.manage.view.ManageWorkbenchLinesSplitTable;
+import au.com.finsyn.xmlcustomisation.customisablecomponents.XmlCustomisablePopupMenuAction;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
+import jSSS.cdelegation.AcurityCommandUpdate;
+import org.apache.commons.logging.Log;
+
+import javax.annotation.ParametersAreNonnullByDefault;
+import javax.swing.JOptionPane;
+import java.awt.event.ActionEvent;
+import java.util.Collection;
+import java.util.concurrent.ExecutionException;
+import java.util.function.Consumer;
+
+/**
+ * TODO add documentation
+ *
+ * @author timothym
+ */
+@ParametersAreNonnullByDefault
+@ReturnTypesAreNonnullByDefault
+public class SetPeriodDatesAction extends XmlCustomisablePopupMenuAction {
+
+    private static final Log LOG = AcurityLogging.getInstance().getLogger(SetPeriodDatesAction.class);
+
+    private static final String NAME = "setDates";
+
+    private final ManageWorkbenchLinesSplitTable table;
+    private final ManageWorkbenchLinesModel model;
+    private final ExceptionHandler exceptionHandler;
+
+    public SetPeriodDatesAction(ManageWorkbenchLinesSplitTable table, ManageWorkbenchLinesModel model) {
+        super("Set period start/end dates",
+                model.getCustomisation()
+                        .getTableCustomisation(ManageWorkbenchLinesTableModel.MANAGE_WORKBENCH_LINES_MAIN_TABLE_NAME));
+
+        this.table = table;
+        this.model = model;
+        this.exceptionHandler = this.model.getExceptionHandler();
+    }
+
+    @Override
+    public String getName() {
+        return NAME;
+    }
+
+    @Override
+    public void actionPerformed(ActionEvent e) {
+        WorkbenchLines selectedWorkbenchLine = this.model.getSelectedWorkbenchLine();
+
+        if (selectedWorkbenchLine == null || this.table.getSelectedRow() < 0) {
+            // There is no selected line
+            return;
+        }
+
+        computeLinesToUpdate(selectedWorkbenchLine, this::displaySetPeriodDatesDialog);
+    }
+
+    private void computeLinesToUpdate(WorkbenchLines workbenchLines,
+                                      Consumer<ImmutableSet<WorkbenchLines>> resultCallback) {
+        new RetrieveLinesToUpdateTask(workbenchLines) {
+            @Override
+            protected void onTaskCompleted() {
+                try {
+                    resultCallback.accept(get());
+                } catch (InterruptedException e) {
+                    LOG.warn("FC line retrieval task was interrupted", e);
+                } catch (ExecutionException e) {
+                    exceptionHandler.handleRecoverableException(e.getCause(),
+                            "An error was encountered while retrieving the associated contribution lines");
+                }
+            }
+        }.execute(new ProgressDialog(this.table, "Finding associated contribution lines"));
+    }
+
+    private void displaySetPeriodDatesDialog(ImmutableSet<WorkbenchLines> workbenchLines) {
+
+        if (workbenchLines.isEmpty()) {
+            // TODO improve this message
+            Dialogs.show(this.table, MessageType.INFORMATION,
+                    "There are no posted contribution lines for this workbench line.");
+        } else {
+            SetPeriodsDialog setPeriodsDialog =
+                    new SetPeriodsDialog(workbenchLines.size(), countJoinedFCLines(workbenchLines));
+            setPeriodDatesFromDialog(workbenchLines, setPeriodsDialog);
+        }
+    }
+
+    private static int countJoinedFCLines(Collection<WorkbenchLines> workbenchLines) {
+        return (int) workbenchLines
+                .stream()
+                .flatMap(fwLine -> fwLine.getContributionLines().stream())
+                .count();
+    }
+
+    private void setPeriodDatesFromDialog(ImmutableSet<WorkbenchLines> workbenchLines, SetPeriodsDialog setPeriodsDialog) {
+        int dialogResult = setPeriodsDialog.showDialog();
+
+        if (dialogResult == JOptionPane.OK_OPTION) {
+            try {
+                updatePeriodDatesInDatabase(workbenchLines, setPeriodsDialog.getDateRange());
+            } catch (DateRangeException e) {
+                Dialogs.show(this.table, MessageType.ERROR, "Invalid dates provided: " + e.getMessage());
+
+                // Tail recursion is its own reward
+                setPeriodDatesFromDialog(workbenchLines, setPeriodsDialog);
+            }
+        }
+    }
+
+    private static void updatePeriodDatesInDatabase(ImmutableSet<WorkbenchLines> workbenchLines, DateRange dateRange) {
+        // TODO ensure that we clone the joined entities
+//        ImmutableList<WorkbenchLines> modifiedFWLines = AcurityEntityUtils.cloneEntityCollection(workbenchLines);
+//        setPeriodDates(modifiedFWLines, dateRange);
+//
+//        AcurityCommandUpdate updateCommand = new AcurityCommandUpdate("Updating period dates");
+//
+//        modifiedFWLines.forEach(updateCommand::addEntityToSave);
+//
+//        updateCommand.postTask(result -> {
+//
+//        });
+
+
+    }
+
+    private static void setPeriodDates(Collection<WorkbenchLines> workbenchLines, DateRange dateRange) {
+        workbenchLines.forEach(fwLine -> {
+            fwLine.setFWd_Period_Start(dateRange.getStartDateAsSQLDate());
+            fwLine.setFWd_Period_End(dateRange.getEndDateAsSQLDate());
+        });
+    }
+}
Index: src/main/java/au/com/finsyn/hibernate/AcurityEntityUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/main/java/au/com/finsyn/hibernate/AcurityEntityUtils.java	(revision 27642:125afeb935ba373c2dad1f1a597b713964bc01b4)
+++ src/main/java/au/com/finsyn/hibernate/AcurityEntityUtils.java	(revision 27642+:125afeb935ba+)
@@ -9,13 +9,16 @@
 import au.com.finsyn.util.AcurityLogging;
 import au.com.finsyn.util.RegexUtils;
 import au.com.finsyn.util.datastructures.CollectionUtils;
+import com.google.common.collect.ImmutableList;
 import jSSS.util.StringUtil;
+import org.apache.commons.beanutils.BeanUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.logging.Log;
 import org.hibernate.HibernateException;
 
 import javax.annotation.Nullable;
 import javax.management.ReflectionException;
+import java.lang.reflect.InvocationTargetException;
 import java.text.SimpleDateFormat;
 import java.util.Arrays;
 import java.util.Collection;
@@ -28,7 +31,7 @@
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
-public class AcurityEntityUtils {
+public final class AcurityEntityUtils {
     private static final Log LOG = AcurityLogging.getInstance().getLogger(AcurityEntityUtils.class);
 
 	public static final String USER_DEFINED_PREFIX = "ZZ";
@@ -639,5 +642,23 @@
      */
     public static String getTableName(Class<? extends AcurityEntity> table) {
         return AcurityEntity.getDummyInstance(table).get().getInstanceTableName();
+    }
+
+	// TODO write test for this.
+	@SuppressWarnings("unchecked")
+	public static <T extends AcurityEntity> T clone(T acurityEntity)
+			throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
+		return (T) BeanUtils.cloneBean(acurityEntity);
+	}
+
+	public static <T extends AcurityEntity> ImmutableList<T> cloneEntityCollection(Collection<T> collection)
+			throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException {
+		ImmutableList.Builder<T> builder = ImmutableList.builder();
+
+		for (T entity : collection) {
+			builder.add(clone(entity));
+		}
+
+		return builder.build();
-    }
+	}
 }
